# File: .github/workflows/ci.yml
#
# GitHub Actions CI for the CLibs project.
# • Builds on Ubuntu & macOS
# • Tests with both GCC and Clang.
# • Enables sanitizers on Debug builds.
# • Runs CTest to execute all registered tests.
# • (Optional) Captures coverage on Ubuntu/GCC.

name: C/C++ CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  build-and-test:
    name: Build & Test on ${{ matrix.os }} / ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        compiler: [ gcc, clang ]
      fail-fast: false

    env:
      USE_SANITIZERS: true
      COLLECT_COVERAGE: ${{ matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc' && github.event_name == 'push' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.compiler }}" == "gcc" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential cmake
          else
            sudo apt-get update
            sudo apt-get install -y clang cmake
          fi
          sudo apt-get install -y valgrind

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake gcc

      - name: Configure CMake
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DUSE_SANITIZERS=$USE_SANITIZERS

      - name: Build
        shell: bash
        run: cmake --build build -- -j$(nproc)

      - name: Run unit tests
        shell: bash
        run: |
          cd build
          chmod +x tests
          ctest --output-on-failure

      - name: Check memory leaks (macOS)
        shell: bash
        if: runner.os == 'macOS'
        run: |
          cd build
          cc -D_POSIX_C_SOURCE=200809L -DUNIT_TESTS_SILENT -o tests ../src/*.c ../src/structs/*.c ../tests/tests.c
          cc -D_POSIX_C_SOURCE=200809L -DUNIT_TESTS_SILENT -o test_sets ../src/*.c ../src/structs/*.c ../tests/test_sets.c
          cc -D_POSIX_C_SOURCE=200809L -DUNIT_TESTS_SILENT -o test_queue ../src/*.c ../src/structs/*.c ../tests/test_queue.c
          leaks -quiet --atExit -- ./tests
          leaks -quiet --atExit -- ./test_sets
          leaks -quiet --atExit -- ./test_queue

      - name: Check memory leaks (Linux)
        shell: bash
        if: runner.os == 'Linux'
        run: |
          cd build
          cc -D_POSIX_C_SOURCE=200809L -DUNIT_TESTS_SILENT -o tests ../src/*.c ../src/structs/*.c ../tests/tests.c
          cc -D_POSIX_C_SOURCE=200809L -DUNIT_TESTS_SILENT -o test_sets ../src/*.c ../src/structs/*.c ../tests/test_sets.c
          cc -D_POSIX_C_SOURCE=200809L -DUNIT_TESTS_SILENT -o test_queue ../src/*.c ../src/structs/*.c ../tests/test_queue.c
          valgrind --leak-check=full --show-reachable=yes --track-origins=yes ./tests
          valgrind --leak-check=full --show-reachable=yes --track-origins=yes ./test_sets
          valgrind --leak-check=full --show-reachable=yes --track-origins=yes ./test_queue
